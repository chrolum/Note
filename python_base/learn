# def Pascal(max):
#     L = [1]
#     n = 0
#     while n<max:
#         yield L
#         L = [L[x] + L[x+1] for x in range(len(L)-1)] #先生成完整对象在赋值给新的L，而不是一边循环一遍赋值给新
#         L.insert(0,1)
#         L.append(1)
#         n = n + 1
#
# for k in Pascal(10):
#     print(k)
# import datetime
# def log(func):
#     def wrapper(*args, **kw):
#         print('call %s():' %func.__name__)
#         return func(*args, **kw)
#     return wrapper
# @log #equal to now = log(now)
# def now():
#     print('2001')
#
# now()
# import functools
# def log(text):
#     def decorator(func):
#         @functools.wraps(func)
#         def wrapper(*args, **kw):
#             print('%s, %s()', text, func.__name__)
#             return func(*args, **kw)
#         return wrapper
#     return decorator
#
# @log('wwww')
# def now233():
#     print('2333')
#
# now233()

def f1(a, b, c=0, *args, **kw):
    print(a, b, c, args, kw)

def f2(a, b, c=0, *, d, **kw):
    print(a, b, c, d, kw)

args = (1, 2, 3)
kw = {'d': 99, 'x':'#'}
# f1(*args, **kw)
f2(*args, **kw)









